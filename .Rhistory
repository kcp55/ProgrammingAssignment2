args(paste)
function(...,sep = " ", collapse = NULL)
paste("a", "b", sep = ":")
paste("a", "b", sep = ":")
paste("a", "b")
lm <- function(x) {
x * x
}
lm(4)
library("swirl")
ls()
rm(lists=ls("lm"))
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z = c(1.1, 9, 3.14)
z
info()
z <- c(1.1, 9, 3.14)
?c
z
z <- c(555, z)
z
z <- c(555, 1.1, 9. 3.14)
c(555, z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
library(datasets)
data("iris")
?iris
lapply(iris, mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
colMean(iris)
colMeans(iris)
iris
apply(iris[,1:4], 2, mean)
str(lm)
x <- rnorm(100,2,4)
str(x)
x <- rnorm(10, 20, 2)
x
summary(x)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 +2*x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
sample(1:10,6)
sample(1:10,5,replace = TRUE)
sample(rnorm(100))
sample(rnorm(100),4)
set.seed(10)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10,0,20)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
library(mtcars)
library(datasets)
data("mtcars")
?mtcars
sapply(mtcars, cyl,mean)
mean(mtcars$mpg,mtcars$cyl)
with(mtcars, tapply(mtcars$cyl,mtcars$mpg,mean))
tapply(mtcars$cyl,mtcars$mpg,mean)
lapply(mtcars,mean)
split(mtcars,mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
apply(mtcars,2,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
debug(ls)
ls
3
4
0
exit
1
library(datasets)
data(iris)
?iris
iris$Sepal.Length
iris
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[,c("Sepal.length")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
s
sapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris,1,mean)
apply(iris[,1:4],1,mean)
colMeans(iris)
apply(iris,2,mean)
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
debug(ls)
ls
n
h
library
library(datasets)
library(datasets)
Rprof()
k
k
f
library
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(10)
set.seed(1)
rpois(5,2)
makeCacheMatrix <- function(x = ,matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setInverse <- function(inverse) iv <<- inverse
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x,...) {
iv <- x$getInverse()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
iv <- solve(data,...)
x$setInverse(iv)
iv
}
}
}
makeCacheMatrix <- function(x = ,matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setInverse <- function(inverse) iv <<- inverse
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x,...) {
iv <- x$getInverse()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
iv <- solve(data,...)
x$setInverse(iv)
iv
}
makeCacheMatrix(9)
makeCacheMatrix <- function(x = ,matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setInverse <- function(inverse) iv <<- inverse
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x,...) {
iv <- x$getInverse()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
iv <- solve(data,...)
x$setInverse(iv)
iv
}
makeCacheMatrix(9)
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setInverse <- function(inverse) iv <<- inverse
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x,...) {
iv <- x$getInverse()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
iv <- solve(data,...)
x$setInverse(iv)
iv
}
makeCacheMatrix(9)
cacheSolve(9)
?matrix
makeCacheMatrix(1:10,5,2)
makeCacheMatrix(1:10)
cacheSolve(makeCacheMatrix(1:10))
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setInverse <- function(inverse) iv <<- inverse
getInverse <- function() iv
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x,...) {
iv <- x$getInverse()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
iv <- solve(data,...)
x$setInverse(iv)
iv
}
cacheSolve(makeCacheMatrix(1:10))
cacheSolve(makeCacheMatrix(1:4))
cacheSolve(makeCacheMatrix(2:2))
cacheSolve(makeCacheMatrix(4:4))
testMatrix <- matrix(9,3,3)
cacheMatrix <- makeCacheMatrix(testMatrix)
cacheSolve(cacheMatrix)
x <- matrix(1:9,3)
x <- matrix(1:9,3,3)
cacheMatrix <- makeCacheMatrix(x)
cacheSolve(cacheMatrix)
cacheMatrix
x
cacheSolve(x)
testmatrix <- matrix(c(1,5,8,2),2,2)
testmatrix
cache1 <- makeCacheMatrix(testmatrix)
cache1$get()
cache1$getInverse()
cache1$setInverse()
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setInverse <- function(inverse) iv <<- inverse
getInverse <- solve(iv)
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x,...) {
iv <- x$getInverse()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
iv <- solve(data,...)
x$setInverse(iv)
return(iv)
}
y <- matrix(1:9,3,3)
cahce1 <- makeCacheMatrix(y)
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setInverse <- function(inverse) iv <<- inverse
getInverse <- function() iv
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x,...) {
iv <- x$getInverse()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
iv <- solve(data,...)
x$setInverse(iv)
return(iv)
}
x <- matrix(1:9,3,3)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setInverse <- function(solveInverse) iv <<- solveInverse
getInverse <- function() iv
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x,...) {
iv <- x$getInverse()
if(!is.null(iv)) {
message("getting cached data")
return(iv)
}
data <- x$get()
iv <- solve(data)
x$setInverse(iv)
return(iv)
}
x <- matrix(1:9,3,3)
x
cache1 <- makeCacheMatrix(x)
cache1$getInverse()
cacheSolve(cache1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(solveMatrix) inv <<- solveMatrix
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
x <- matrix(1:9,3,3)
cache1 <- makeCacheMatrix(x)
cache1$getInverse()
setwd("~/Documents/R Programming Directory Coursera/ProgrammingAssignment2-master")
